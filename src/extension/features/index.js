/*
 ***********************************************************
 * Warning: This is a file generated by the build process. *
 *                                                         *
 * Any changes you make manually will be overwritten       *
 * the next time you run webpack!                          *
 ***********************************************************
 */
import { AssistedClear } from './accounts/assisted-clear';
import { AutoDistributeSplits } from './accounts/auto-distribute-splits';
import { AutoEnableRunningBalance } from './accounts/auto-enable-running-balance';
import { AutomaticallyMarkAsCleared } from './accounts/auto-mark-as-cleared';
import { BottomNotificationBar } from './accounts/bottom-notification-bar';
import { BulkEditMemo } from './accounts/bulk-edit-memo';
import { BulkManagePayees } from './accounts/bulk-manage-payees';
import { CalculateIRR } from './accounts/calculate-irr';
import { CalendarFirstDay } from './accounts/calendar-first-day';
import { ChangeEnterBehavior } from './accounts/change-enter-behavior';
import { ChangeMemoEnterBehavior } from './accounts/change-memo-enter-behavior';
import { CheckNumbers } from './accounts/check-numbers';
import { ClearSelection } from './accounts/clear-selection';
import { ConfirmKeyboardCancelationOfTransactionChanges } from './accounts/confirm-keyboard-cancelation-of-transaction-changes';
import { CtrlEnterCleared } from './accounts/ctrl-enter-cleared';
import { CustomFlagNames } from './accounts/custom-flag-names';
import { DeselectTransactionsOnSave } from './accounts/deselect-transactions-on-save';
import { EasyTransactionApproval } from './accounts/easy-transaction-approval';
import { AccountsEmphasizedInflows } from './accounts/emphasized-inflows';
import { AccountsEmphasizedOutflows } from './accounts/emphasized-outflows';
import { LargerClickableIcons } from './accounts/larger-cleared-icons';
import { LastReconciledDate } from './accounts/last-reconciled-date';
import { MemoAsMarkdown } from './accounts/memo-as-markdown';
import { ReconcileBalance } from './accounts/reconcile-balance';
import { ReconcileConfetti } from './accounts/reconcile-confetti';
import { ReconciledTextColor } from './accounts/reconciled-text-color';
import { RightClickToEdit } from './accounts/right-click-to-edit';
import { RowHeight } from './accounts/row-height';
import { SetMultipleFlags } from './accounts/set-multiple-flags';
import { ShowCategoryBalance } from './accounts/show-category-balance';
import { SpareChange } from './accounts/spare-change';
import { SplitTransactionAutoAdjust } from './accounts/split-transaction-auto-adjust';
import { AccountsStripedRows } from './accounts/striped-rows';
import { SwapClearedFlagged } from './accounts/swap-cleared-flagged';
import { ToggleAccountColumns } from './accounts/toggle-account-columns';
import { ToggleSplits } from './accounts/toggle-splits';
import { ToggleTransactionFilters } from './accounts/toggle-transaction-filters';
import { DisableToolkit } from './advanced/disable-toolkit';
import { DisplayTargetGoalAmount } from './budget/budget-category-features/display-target-goal-amount';
import { GoalIndicator } from './budget/budget-category-features/goal-indicator';
import { GoalWarningColor } from './budget/budget-category-features/goal-warning-color';
import { HighlightNegatives } from './budget/budget-category-features/highlight-negatives';
import { BudgetCategoryFeatures } from './budget/budget-category-features';
import { TargetBalanceWarning } from './budget/budget-category-features/target-balance-warning';
import { BudgetProgressBars } from './budget/budget-progress-bars';
import { BudgetSpendingGoal } from './budget/budget-spending-goal';
import { CategoryActivityPopupWidth } from './budget/category-activity-popup-width';
import { CategorySoloMode } from './budget/category-solo-mode';
import { CheckCreditBalances } from './budget/check-credit-balances';
import { MasterCategoryRowColor } from './budget/color-master-category-row';
import { CreditCardEmoji } from './budget/credit-card-emoji';
import { DateOfMoney } from './budget/date-of-money';
import { DaysOfBuffering } from './budget/days-of-buffering';
import { DisplayTotalMonthlyGoals } from './budget/display-total-monthly-goals';
import { DisplayUpcomingAmount } from './budget/display-upcoming-amount';
import { EnlargeCategoriesDropdown } from './budget/enlarge-categories-dropdown';
import { FilterCategories } from './budget/filter-categories';
import { HideAgeOfMoney } from './budget/hide-age-of-money';
import { HideTotalAvailable } from './budget/hide-total-available';
import { HoveredBudgetRows } from './budget/highlight-budget-rows-on-hover';
import { CurrentMonthIndicator } from './budget/highlight-current-month';
import { IncomeFromLastMonth } from './budget/income-from-last-month';
import { LinkToInflows } from './budget/link-to-inflows';
import { MonthlyNotesPopupWidth } from './budget/monthly-notes-popup-width';
import { NotesAsMarkdown } from './budget/notes-as-markdown';
import { Pacing } from './budget/pacing';
import { QuickBudgetWarning } from './budget/quick-budget-warning';
import { RemovePositiveHighlight } from './budget/remove-positive-highlight';
import { RemoveZeroCategories } from './budget/remove-zero-categories';
import { RowsHeight } from './budget/rows-height';
import { SeamlessBudgetHeader } from './budget/seamless-budget-header';
import { StealingFromFuture } from './budget/stealing-from-future';
import { StripedBudgetRows } from './budget/striped-budget-rows';
import { ToBeBudgetedWarning } from './budget/to-be-budgeted-warning';
import { AccountsDisplayDensity } from './general/accounts-display-density';
import { BetterScrollbars } from './general/better-scrollbars';
import { BudgetQuickSwitch } from './general/budget-quick-switch';
import { CategoryActivityCopy } from './general/category-activity-copy';
import { ColourBlindMode } from './general/colour-blind-mode';
import { EditAccountButton } from './general/edit-account-button';
import { GoogleFontsSelector } from './general/google-fonts-selector';
import { HideAccountBalancesType } from './general/hide-account-balances';
import { HideClosedAccounts } from './general/hide-closed-accounts';
import { HideHelp } from './general/hide-help';
import { HideReferralBanner } from './general/hide-referral-banner';
import { ImportNotification } from './general/import-notification';
import { NavDisplayDensity } from './general/nav-display-density';
import { POSStyleCurrencyEntryMode } from './general/pos-style-currency-entry-mode';
import { PrintingImprovements } from './general/printing-improvements';
import { PrivacyMode } from './general/privacy-mode';
import { SquareNegativeMode } from './general/square-negative-mode';
import { UnclearedAccountHighlight } from './general/uncleared-account-highlight';
import { CompactIncomeVsExpense } from './reports/compact-income-vs-expense';
import { IncomeVsExpenseHoverHighlight } from './reports/income-expense-hover-highlight';
import { ViewZeroAsEmpty } from './reports/view-zero-as-empty';
import { HideDebtRatio } from './toolkit-reports/hide-debt-ratio';
import { ToolkitReports } from './toolkit-reports';

if (!AssistedClear) {
  throw new Error(
    'AssistedClear feature failed to import. Have you set the name in the settings.js file to match the class name?'
  );
}
if (!AutoDistributeSplits) {
  throw new Error(
    'AutoDistributeSplits feature failed to import. Have you set the name in the settings.js file to match the class name?'
  );
}
if (!AutoEnableRunningBalance) {
  throw new Error(
    'AutoEnableRunningBalance feature failed to import. Have you set the name in the settings.js file to match the class name?'
  );
}
if (!AutomaticallyMarkAsCleared) {
  throw new Error(
    'AutomaticallyMarkAsCleared feature failed to import. Have you set the name in the settings.js file to match the class name?'
  );
}
if (!BottomNotificationBar) {
  throw new Error(
    'BottomNotificationBar feature failed to import. Have you set the name in the settings.js file to match the class name?'
  );
}
if (!BulkEditMemo) {
  throw new Error(
    'BulkEditMemo feature failed to import. Have you set the name in the settings.js file to match the class name?'
  );
}
if (!BulkManagePayees) {
  throw new Error(
    'BulkManagePayees feature failed to import. Have you set the name in the settings.js file to match the class name?'
  );
}
if (!CalculateIRR) {
  throw new Error(
    'CalculateIRR feature failed to import. Have you set the name in the settings.js file to match the class name?'
  );
}
if (!CalendarFirstDay) {
  throw new Error(
    'CalendarFirstDay feature failed to import. Have you set the name in the settings.js file to match the class name?'
  );
}
if (!ChangeEnterBehavior) {
  throw new Error(
    'ChangeEnterBehavior feature failed to import. Have you set the name in the settings.js file to match the class name?'
  );
}
if (!ChangeMemoEnterBehavior) {
  throw new Error(
    'ChangeMemoEnterBehavior feature failed to import. Have you set the name in the settings.js file to match the class name?'
  );
}
if (!CheckNumbers) {
  throw new Error(
    'CheckNumbers feature failed to import. Have you set the name in the settings.js file to match the class name?'
  );
}
if (!ClearSelection) {
  throw new Error(
    'ClearSelection feature failed to import. Have you set the name in the settings.js file to match the class name?'
  );
}
if (!ConfirmKeyboardCancelationOfTransactionChanges) {
  throw new Error(
    'ConfirmKeyboardCancelationOfTransactionChanges feature failed to import. Have you set the name in the settings.js file to match the class name?'
  );
}
if (!CtrlEnterCleared) {
  throw new Error(
    'CtrlEnterCleared feature failed to import. Have you set the name in the settings.js file to match the class name?'
  );
}
if (!CustomFlagNames) {
  throw new Error(
    'CustomFlagNames feature failed to import. Have you set the name in the settings.js file to match the class name?'
  );
}
if (!DeselectTransactionsOnSave) {
  throw new Error(
    'DeselectTransactionsOnSave feature failed to import. Have you set the name in the settings.js file to match the class name?'
  );
}
if (!EasyTransactionApproval) {
  throw new Error(
    'EasyTransactionApproval feature failed to import. Have you set the name in the settings.js file to match the class name?'
  );
}
if (!AccountsEmphasizedInflows) {
  throw new Error(
    'AccountsEmphasizedInflows feature failed to import. Have you set the name in the settings.js file to match the class name?'
  );
}
if (!AccountsEmphasizedOutflows) {
  throw new Error(
    'AccountsEmphasizedOutflows feature failed to import. Have you set the name in the settings.js file to match the class name?'
  );
}
if (!LargerClickableIcons) {
  throw new Error(
    'LargerClickableIcons feature failed to import. Have you set the name in the settings.js file to match the class name?'
  );
}
if (!LastReconciledDate) {
  throw new Error(
    'LastReconciledDate feature failed to import. Have you set the name in the settings.js file to match the class name?'
  );
}
if (!MemoAsMarkdown) {
  throw new Error(
    'MemoAsMarkdown feature failed to import. Have you set the name in the settings.js file to match the class name?'
  );
}
if (!ReconcileBalance) {
  throw new Error(
    'ReconcileBalance feature failed to import. Have you set the name in the settings.js file to match the class name?'
  );
}
if (!ReconcileConfetti) {
  throw new Error(
    'ReconcileConfetti feature failed to import. Have you set the name in the settings.js file to match the class name?'
  );
}
if (!ReconciledTextColor) {
  throw new Error(
    'ReconciledTextColor feature failed to import. Have you set the name in the settings.js file to match the class name?'
  );
}
if (!RightClickToEdit) {
  throw new Error(
    'RightClickToEdit feature failed to import. Have you set the name in the settings.js file to match the class name?'
  );
}
if (!RowHeight) {
  throw new Error(
    'RowHeight feature failed to import. Have you set the name in the settings.js file to match the class name?'
  );
}
if (!SetMultipleFlags) {
  throw new Error(
    'SetMultipleFlags feature failed to import. Have you set the name in the settings.js file to match the class name?'
  );
}
if (!ShowCategoryBalance) {
  throw new Error(
    'ShowCategoryBalance feature failed to import. Have you set the name in the settings.js file to match the class name?'
  );
}
if (!SpareChange) {
  throw new Error(
    'SpareChange feature failed to import. Have you set the name in the settings.js file to match the class name?'
  );
}
if (!SplitTransactionAutoAdjust) {
  throw new Error(
    'SplitTransactionAutoAdjust feature failed to import. Have you set the name in the settings.js file to match the class name?'
  );
}
if (!AccountsStripedRows) {
  throw new Error(
    'AccountsStripedRows feature failed to import. Have you set the name in the settings.js file to match the class name?'
  );
}
if (!SwapClearedFlagged) {
  throw new Error(
    'SwapClearedFlagged feature failed to import. Have you set the name in the settings.js file to match the class name?'
  );
}
if (!ToggleAccountColumns) {
  throw new Error(
    'ToggleAccountColumns feature failed to import. Have you set the name in the settings.js file to match the class name?'
  );
}
if (!ToggleSplits) {
  throw new Error(
    'ToggleSplits feature failed to import. Have you set the name in the settings.js file to match the class name?'
  );
}
if (!ToggleTransactionFilters) {
  throw new Error(
    'ToggleTransactionFilters feature failed to import. Have you set the name in the settings.js file to match the class name?'
  );
}
if (!DisableToolkit) {
  throw new Error(
    'DisableToolkit feature failed to import. Have you set the name in the settings.js file to match the class name?'
  );
}
if (!DisplayTargetGoalAmount) {
  throw new Error(
    'DisplayTargetGoalAmount feature failed to import. Have you set the name in the settings.js file to match the class name?'
  );
}
if (!GoalIndicator) {
  throw new Error(
    'GoalIndicator feature failed to import. Have you set the name in the settings.js file to match the class name?'
  );
}
if (!GoalWarningColor) {
  throw new Error(
    'GoalWarningColor feature failed to import. Have you set the name in the settings.js file to match the class name?'
  );
}
if (!HighlightNegatives) {
  throw new Error(
    'HighlightNegatives feature failed to import. Have you set the name in the settings.js file to match the class name?'
  );
}
if (!BudgetCategoryFeatures) {
  throw new Error(
    'BudgetCategoryFeatures feature failed to import. Have you set the name in the settings.js file to match the class name?'
  );
}
if (!TargetBalanceWarning) {
  throw new Error(
    'TargetBalanceWarning feature failed to import. Have you set the name in the settings.js file to match the class name?'
  );
}
if (!BudgetProgressBars) {
  throw new Error(
    'BudgetProgressBars feature failed to import. Have you set the name in the settings.js file to match the class name?'
  );
}
if (!BudgetSpendingGoal) {
  throw new Error(
    'BudgetSpendingGoal feature failed to import. Have you set the name in the settings.js file to match the class name?'
  );
}
if (!CategoryActivityPopupWidth) {
  throw new Error(
    'CategoryActivityPopupWidth feature failed to import. Have you set the name in the settings.js file to match the class name?'
  );
}
if (!CategorySoloMode) {
  throw new Error(
    'CategorySoloMode feature failed to import. Have you set the name in the settings.js file to match the class name?'
  );
}
if (!CheckCreditBalances) {
  throw new Error(
    'CheckCreditBalances feature failed to import. Have you set the name in the settings.js file to match the class name?'
  );
}
if (!MasterCategoryRowColor) {
  throw new Error(
    'MasterCategoryRowColor feature failed to import. Have you set the name in the settings.js file to match the class name?'
  );
}
if (!CreditCardEmoji) {
  throw new Error(
    'CreditCardEmoji feature failed to import. Have you set the name in the settings.js file to match the class name?'
  );
}
if (!DateOfMoney) {
  throw new Error(
    'DateOfMoney feature failed to import. Have you set the name in the settings.js file to match the class name?'
  );
}
if (!DaysOfBuffering) {
  throw new Error(
    'DaysOfBuffering feature failed to import. Have you set the name in the settings.js file to match the class name?'
  );
}
if (!DisplayTotalMonthlyGoals) {
  throw new Error(
    'DisplayTotalMonthlyGoals feature failed to import. Have you set the name in the settings.js file to match the class name?'
  );
}
if (!DisplayUpcomingAmount) {
  throw new Error(
    'DisplayUpcomingAmount feature failed to import. Have you set the name in the settings.js file to match the class name?'
  );
}
if (!EnlargeCategoriesDropdown) {
  throw new Error(
    'EnlargeCategoriesDropdown feature failed to import. Have you set the name in the settings.js file to match the class name?'
  );
}
if (!FilterCategories) {
  throw new Error(
    'FilterCategories feature failed to import. Have you set the name in the settings.js file to match the class name?'
  );
}
if (!HideAgeOfMoney) {
  throw new Error(
    'HideAgeOfMoney feature failed to import. Have you set the name in the settings.js file to match the class name?'
  );
}
if (!HideTotalAvailable) {
  throw new Error(
    'HideTotalAvailable feature failed to import. Have you set the name in the settings.js file to match the class name?'
  );
}
if (!HoveredBudgetRows) {
  throw new Error(
    'HoveredBudgetRows feature failed to import. Have you set the name in the settings.js file to match the class name?'
  );
}
if (!CurrentMonthIndicator) {
  throw new Error(
    'CurrentMonthIndicator feature failed to import. Have you set the name in the settings.js file to match the class name?'
  );
}
if (!IncomeFromLastMonth) {
  throw new Error(
    'IncomeFromLastMonth feature failed to import. Have you set the name in the settings.js file to match the class name?'
  );
}
if (!LinkToInflows) {
  throw new Error(
    'LinkToInflows feature failed to import. Have you set the name in the settings.js file to match the class name?'
  );
}
if (!MonthlyNotesPopupWidth) {
  throw new Error(
    'MonthlyNotesPopupWidth feature failed to import. Have you set the name in the settings.js file to match the class name?'
  );
}
if (!NotesAsMarkdown) {
  throw new Error(
    'NotesAsMarkdown feature failed to import. Have you set the name in the settings.js file to match the class name?'
  );
}
if (!Pacing) {
  throw new Error(
    'Pacing feature failed to import. Have you set the name in the settings.js file to match the class name?'
  );
}
if (!QuickBudgetWarning) {
  throw new Error(
    'QuickBudgetWarning feature failed to import. Have you set the name in the settings.js file to match the class name?'
  );
}
if (!RemovePositiveHighlight) {
  throw new Error(
    'RemovePositiveHighlight feature failed to import. Have you set the name in the settings.js file to match the class name?'
  );
}
if (!RemoveZeroCategories) {
  throw new Error(
    'RemoveZeroCategories feature failed to import. Have you set the name in the settings.js file to match the class name?'
  );
}
if (!RowsHeight) {
  throw new Error(
    'RowsHeight feature failed to import. Have you set the name in the settings.js file to match the class name?'
  );
}
if (!SeamlessBudgetHeader) {
  throw new Error(
    'SeamlessBudgetHeader feature failed to import. Have you set the name in the settings.js file to match the class name?'
  );
}
if (!StealingFromFuture) {
  throw new Error(
    'StealingFromFuture feature failed to import. Have you set the name in the settings.js file to match the class name?'
  );
}
if (!StripedBudgetRows) {
  throw new Error(
    'StripedBudgetRows feature failed to import. Have you set the name in the settings.js file to match the class name?'
  );
}
if (!ToBeBudgetedWarning) {
  throw new Error(
    'ToBeBudgetedWarning feature failed to import. Have you set the name in the settings.js file to match the class name?'
  );
}
if (!AccountsDisplayDensity) {
  throw new Error(
    'AccountsDisplayDensity feature failed to import. Have you set the name in the settings.js file to match the class name?'
  );
}
if (!BetterScrollbars) {
  throw new Error(
    'BetterScrollbars feature failed to import. Have you set the name in the settings.js file to match the class name?'
  );
}
if (!BudgetQuickSwitch) {
  throw new Error(
    'BudgetQuickSwitch feature failed to import. Have you set the name in the settings.js file to match the class name?'
  );
}
if (!CategoryActivityCopy) {
  throw new Error(
    'CategoryActivityCopy feature failed to import. Have you set the name in the settings.js file to match the class name?'
  );
}
if (!ColourBlindMode) {
  throw new Error(
    'ColourBlindMode feature failed to import. Have you set the name in the settings.js file to match the class name?'
  );
}
if (!EditAccountButton) {
  throw new Error(
    'EditAccountButton feature failed to import. Have you set the name in the settings.js file to match the class name?'
  );
}
if (!GoogleFontsSelector) {
  throw new Error(
    'GoogleFontsSelector feature failed to import. Have you set the name in the settings.js file to match the class name?'
  );
}
if (!HideAccountBalancesType) {
  throw new Error(
    'HideAccountBalancesType feature failed to import. Have you set the name in the settings.js file to match the class name?'
  );
}
if (!HideClosedAccounts) {
  throw new Error(
    'HideClosedAccounts feature failed to import. Have you set the name in the settings.js file to match the class name?'
  );
}
if (!HideHelp) {
  throw new Error(
    'HideHelp feature failed to import. Have you set the name in the settings.js file to match the class name?'
  );
}
if (!HideReferralBanner) {
  throw new Error(
    'HideReferralBanner feature failed to import. Have you set the name in the settings.js file to match the class name?'
  );
}
if (!ImportNotification) {
  throw new Error(
    'ImportNotification feature failed to import. Have you set the name in the settings.js file to match the class name?'
  );
}
if (!NavDisplayDensity) {
  throw new Error(
    'NavDisplayDensity feature failed to import. Have you set the name in the settings.js file to match the class name?'
  );
}
if (!POSStyleCurrencyEntryMode) {
  throw new Error(
    'POSStyleCurrencyEntryMode feature failed to import. Have you set the name in the settings.js file to match the class name?'
  );
}
if (!PrintingImprovements) {
  throw new Error(
    'PrintingImprovements feature failed to import. Have you set the name in the settings.js file to match the class name?'
  );
}
if (!PrivacyMode) {
  throw new Error(
    'PrivacyMode feature failed to import. Have you set the name in the settings.js file to match the class name?'
  );
}
if (!SquareNegativeMode) {
  throw new Error(
    'SquareNegativeMode feature failed to import. Have you set the name in the settings.js file to match the class name?'
  );
}
if (!UnclearedAccountHighlight) {
  throw new Error(
    'UnclearedAccountHighlight feature failed to import. Have you set the name in the settings.js file to match the class name?'
  );
}
if (!CompactIncomeVsExpense) {
  throw new Error(
    'CompactIncomeVsExpense feature failed to import. Have you set the name in the settings.js file to match the class name?'
  );
}
if (!IncomeVsExpenseHoverHighlight) {
  throw new Error(
    'IncomeVsExpenseHoverHighlight feature failed to import. Have you set the name in the settings.js file to match the class name?'
  );
}
if (!ViewZeroAsEmpty) {
  throw new Error(
    'ViewZeroAsEmpty feature failed to import. Have you set the name in the settings.js file to match the class name?'
  );
}
if (!HideDebtRatio) {
  throw new Error(
    'HideDebtRatio feature failed to import. Have you set the name in the settings.js file to match the class name?'
  );
}
if (!ToolkitReports) {
  throw new Error(
    'ToolkitReports feature failed to import. Have you set the name in the settings.js file to match the class name?'
  );
}

export const features = [
  AssistedClear,
  AutoDistributeSplits,
  AutoEnableRunningBalance,
  AutomaticallyMarkAsCleared,
  BottomNotificationBar,
  BulkEditMemo,
  BulkManagePayees,
  CalculateIRR,
  CalendarFirstDay,
  ChangeEnterBehavior,
  ChangeMemoEnterBehavior,
  CheckNumbers,
  ClearSelection,
  ConfirmKeyboardCancelationOfTransactionChanges,
  CtrlEnterCleared,
  CustomFlagNames,
  DeselectTransactionsOnSave,
  EasyTransactionApproval,
  AccountsEmphasizedInflows,
  AccountsEmphasizedOutflows,
  LargerClickableIcons,
  LastReconciledDate,
  MemoAsMarkdown,
  ReconcileBalance,
  ReconcileConfetti,
  ReconciledTextColor,
  RightClickToEdit,
  RowHeight,
  SetMultipleFlags,
  ShowCategoryBalance,
  SpareChange,
  SplitTransactionAutoAdjust,
  AccountsStripedRows,
  SwapClearedFlagged,
  ToggleAccountColumns,
  ToggleSplits,
  ToggleTransactionFilters,
  DisableToolkit,
  DisplayTargetGoalAmount,
  GoalIndicator,
  GoalWarningColor,
  HighlightNegatives,
  BudgetCategoryFeatures,
  TargetBalanceWarning,
  BudgetProgressBars,
  BudgetSpendingGoal,
  CategoryActivityPopupWidth,
  CategorySoloMode,
  CheckCreditBalances,
  MasterCategoryRowColor,
  CreditCardEmoji,
  DateOfMoney,
  DaysOfBuffering,
  DisplayTotalMonthlyGoals,
  DisplayUpcomingAmount,
  EnlargeCategoriesDropdown,
  FilterCategories,
  HideAgeOfMoney,
  HideTotalAvailable,
  HoveredBudgetRows,
  CurrentMonthIndicator,
  IncomeFromLastMonth,
  LinkToInflows,
  MonthlyNotesPopupWidth,
  NotesAsMarkdown,
  Pacing,
  QuickBudgetWarning,
  RemovePositiveHighlight,
  RemoveZeroCategories,
  RowsHeight,
  SeamlessBudgetHeader,
  StealingFromFuture,
  StripedBudgetRows,
  ToBeBudgetedWarning,
  AccountsDisplayDensity,
  BetterScrollbars,
  BudgetQuickSwitch,
  CategoryActivityCopy,
  ColourBlindMode,
  EditAccountButton,
  GoogleFontsSelector,
  HideAccountBalancesType,
  HideClosedAccounts,
  HideHelp,
  HideReferralBanner,
  ImportNotification,
  NavDisplayDensity,
  POSStyleCurrencyEntryMode,
  PrintingImprovements,
  PrivacyMode,
  SquareNegativeMode,
  UnclearedAccountHighlight,
  CompactIncomeVsExpense,
  IncomeVsExpenseHoverHighlight,
  ViewZeroAsEmpty,
  HideDebtRatio,
  ToolkitReports,
];
